% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/check.R
\name{max_deps_check}
\alias{max_deps_check}
\alias{release_deps_check}
\alias{min_deps_check}
\title{Execute \verb{R CMD CHECK} on a local package with all dependencies pre-installed using various strategies.}
\usage{
max_deps_check(
  path,
  config = list(dependencies = .desc_field, library = tempfile()),
  build_args = character(),
  check_args = character(),
  ...
)

release_deps_check(
  path,
  config = list(dependencies = .desc_field, library = tempfile()),
  build_args = character(),
  check_args = character(),
  ...
)

min_deps_check(
  path,
  config = list(dependencies = .desc_field, library = tempfile()),
  build_args = character(),
  check_args = character(),
  ...
)
}
\arguments{
\item{path}{(\code{string}) path to the package sources}

\item{config}{(\code{list}) configuration options. See \code{\link[pkgdepends:pkg_config]{pkgdepends::pkg_config}} for details.
If it does not include \code{library} then temporary directory is used which simulates clean environment
without using any pre-installed packages.
If it does not include \code{dependencies} then \code{TRUE} value is used which means all hard dependencies plus \code{Suggests}.}

\item{build_args}{(\code{string}) value passed as \code{build_args} argument into \code{\link[rcmdcheck:rcmdcheck]{rcmdcheck::rcmdcheck()}}}

\item{check_args}{(\code{string}) value passed as \code{args} argument into \code{\link[rcmdcheck:rcmdcheck]{rcmdcheck::rcmdcheck()}}}

\item{...}{other arguments passed to \code{\link[rcmdcheck:rcmdcheck]{rcmdcheck::rcmdcheck()}}}
}
\value{
a named \code{list} with two elements:
\itemize{
\item \code{"ip"} - installation plan object
\item \code{"check"} - returned value from \code{\link[rcmdcheck:rcmdcheck]{rcmdcheck::rcmdcheck()}}
}
}
\description{
Execute \verb{R CMD CHECK} on a local package with all dependencies pre-installed using various strategies.
}
\section{strategies}{

Currently implemented strategies:
\itemize{
\item \code{max} - use the greatest version of dependent packages
\item \code{release} - use released version of dependent packages - use CRAN if possible else if GitHub release
is available then use it else fail.
\item \code{min} - use the lowest version of dependent packages incorporating minimal version specification in
\code{"Imports"} and \code{"Suggests"}. If no version is specified then the minimal available
version is assumed. See \link{get_ref_min} for details how the minimal version is determined.
}

Any modification is done for \emph{direct} dependencies. Indirect ones are installed as usual.
}

\seealso{
\link{deps_installation_proposal}
}
