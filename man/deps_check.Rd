% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/check.R
\name{max_deps_check}
\alias{max_deps_check}
\alias{release_deps_check}
\alias{min_cohort_deps_check}
\alias{min_isolated_deps_check}
\title{Execute \verb{R CMD CHECK} on a local package with all dependencies pre-installed using various strategies.}
\usage{
max_deps_check(
  path,
  extra_deps = character(),
  config = list(),
  build_args = character(),
  check_args = character(),
  ...
)

release_deps_check(
  path,
  extra_deps = character(),
  config = list(),
  build_args = character(),
  check_args = character(),
  ...
)

min_cohort_deps_check(
  path,
  extra_deps = character(),
  config = list(),
  build_args = character(),
  check_args = character(),
  ...
)

min_isolated_deps_check(
  path,
  extra_deps = character(),
  config = list(),
  build_args = character(),
  check_args = character(),
  ...
)
}
\arguments{
\item{path}{(\code{string}) path to the package sources}

\item{extra_deps}{(\code{character(1)}) Extra dependencies specified similarly to the \code{DESCRIPTION} file, e.g.
\code{"<package name> (<operator> <version>)"} where both \code{operator} and \code{version} are optional.
Multiple entries are possible separated by \code{";"}.}

\item{config}{(\code{list}) configuration options. See \code{\link[pkgdepends:pkg_config]{pkgdepends::pkg_config}} for details.
\code{"dependencies"} and \code{"library"} elements are overwritten by package level defaults.}

\item{build_args}{(\code{string}) value passed as \code{build_args} argument into \code{\link[rcmdcheck:rcmdcheck]{rcmdcheck::rcmdcheck()}}}

\item{check_args}{(\code{string}) value passed as \code{args} argument into \code{\link[rcmdcheck:rcmdcheck]{rcmdcheck::rcmdcheck()}}}

\item{...}{other arguments passed to \code{\link[rcmdcheck:rcmdcheck]{rcmdcheck::rcmdcheck()}}}
}
\value{
a named \code{list} with two elements:
\itemize{
\item \code{"ip"} - installation plan object
\item \code{"check"} - returned value from \code{\link[rcmdcheck:rcmdcheck]{rcmdcheck::rcmdcheck()}}
}
}
\description{
Execute \verb{R CMD CHECK} on a local package with all dependencies pre-installed using various strategies.
}
\section{strategies}{

Currently implemented strategies:
\itemize{
\item \code{max} - use the greatest version of dependent packages. Please note that using development version is not
guaranteed to be stable.
See \link{get_ref_max} for details.
\item \code{release} - use the released version of dependent packages. It will try use CRAN if possible else if
GitHub release is available then use it else fail.
See \link{get_ref_release} for details.
\item \code{min_cohort} - find maximum date of directly dependent packages release dates and use that as PPM snapshot date
for dependency resolve.
\item \code{min_isolated} - for each direct dependency: find its release date and use it as PPM snapshot for resolving itself.
Next, combine all the individual resolutions and resolve it altogether again.
}

Both "min" strategies relies on PPM snapshot in order to limit the versions of indirect dependencies so that
dependency resolution ends with a package released no earlier than any of its dependency.
However, that's not always true for \code{min_isolated} strategy - done on purpose.

Please note that only \code{min_cohort} and \code{min_isolated} strategies are "stable". The rest are basing on dynamic
references therefore it results might be different without changes in tested package.
The most straightforward example is \code{max} strategy in which the environment will be different after any push of
any of the dependencies.
}

\examples{
\dontshow{if (Sys.getenv("R_USER_CACHE_DIR", "") != "") (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
x <- max_deps_check(".")
x$ip
x$check
\dontshow{\}) # examplesIf}
\dontshow{if (Sys.getenv("R_USER_CACHE_DIR", "") != "") (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
x <- release_deps_check(".")
x$ip
x$check
\dontshow{\}) # examplesIf}
\dontshow{if (Sys.getenv("R_USER_CACHE_DIR", "") != "") (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
x <- min_cohort_deps_check(".")
x$ip
x$check
\dontshow{\}) # examplesIf}
\dontshow{if (Sys.getenv("R_USER_CACHE_DIR", "") != "") (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
x <- min_isolated_deps_check(".")
x$ip
x$check
\dontshow{\}) # examplesIf}
}
\seealso{
\link{deps_installation_proposal}
}
