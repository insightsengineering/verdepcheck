% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/deps_installation_proposal.R
\name{new_max_deps_installation_proposal}
\alias{new_max_deps_installation_proposal}
\alias{deps_installation_proposal}
\alias{new_release_deps_installation_proposal}
\alias{new_min_cohort_deps_installation_proposal}
\alias{new_min_isolated_deps_installation_proposal}
\title{Create installation proposal using various dependency strategies}
\usage{
new_max_deps_installation_proposal(
  path,
  extra_deps = character(0L),
  config = list()
)

new_release_deps_installation_proposal(
  path,
  extra_deps = character(0L),
  config = list()
)

new_min_cohort_deps_installation_proposal(
  path,
  extra_deps = character(0L),
  config = list()
)

new_min_isolated_deps_installation_proposal(
  path,
  extra_deps = character(0L),
  config = list()
)
}
\arguments{
\item{path}{(\code{string}) path to the package sources}

\item{extra_deps}{(\code{character(1)}) Extra dependencies specified similarly to the \code{DESCRIPTION} file, e.g.
\code{"<package name> (<operator> <version>)"} where both \code{operator} and \code{version} are optional.
Multiple entries are possible separated by \code{";"}.}

\item{config}{(\code{list}) configuration options. See \code{\link[pkgdepends:pkg_config]{pkgdepends::pkg_config}} for details.
\code{"dependencies"} and \code{"library"} elements are overwritten by package level defaults.}
}
\value{
\code{pkg_installation_plan} object
}
\description{
These functionalities would read local package \code{DESCRIPTION} file, derive dependencies from
\code{"Config/Needs/verdepcheck"} and create an installation proposal using various strategies for package versions
as described below.
}
\section{strategies}{

Currently implemented strategies:
\itemize{
\item \code{max} - use the greatest version of dependent packages. Please note that using development version is not
guaranteed to be stable.
See \link{get_ref_max} for details.
\item \code{release} - use the released version of dependent packages. It will try use CRAN if possible else if
GitHub release is available then use it else fail.
See \link{get_ref_release} for details.
\item \code{min_cohort} - find maximum date of directly dependent packages release dates and use that as PPM snapshot date
for dependency resolve.
\item \code{min_isolated} - for each direct dependency: find its release date and use it as PPM snapshot for resolving itself.
Next, combine all the individual resolutions and resolve it altogether again.
}

Both "min" strategies relies on PPM snapshot in order to limit the versions of indirect dependencies so that
dependency resolution ends with a package released no earlier than any of its dependency.
However, that's not always true for \code{min_isolated} strategy - done on purpose.

Please note that only \code{min_cohort} and \code{min_isolated} strategies are "stable". The rest are basing on dynamic
references therefore it results might be different without changes in tested package.
The most straightforward example is \code{max} strategy in which the environment will be different after any push of
any of the dependencies.
}

\section{configuration}{

\code{verdepcheck} will look into \code{"Config/Needs/verdepcheck"} field of the \code{DESCRIPTION} file for dependent packages
references. See \code{\link[pkgdepends:pkg_refs]{pkgdepends::pkg_refs}} for details and this package \code{DESCRIPTION} file for an example.
Please note that some features are enabled only for package references from GitHub.
If you specify additional details (i.e. tag, commit, PR or \verb{@*release}) in the reference then it wouldn't be changed.
Therefore, in order to make full use of various strategies, it is recommended to specify general reference in form of
\verb{[<package>=][github::]<username>/<repository>[/<subdir>]} - i.e. without \verb{[<detail>]} part.
Please see also \code{\link[pkgdepends:pkg_config]{pkgdepends::pkg_config}} and \code{\link[pak:pak-config]{pak::pak-config}} for other configuration possibilities.
}

\examples{
\dontshow{if (Sys.getenv("R_USER_CACHE_DIR", "") != "") (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
x <- new_max_deps_installation_proposal(".")
x$solve()
x$get_solution()
\dontshow{\}) # examplesIf}
\dontshow{if (Sys.getenv("R_USER_CACHE_DIR", "") != "") (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
x <- new_release_deps_installation_proposal(".")
x$solve()
x$get_solution()
\dontshow{\}) # examplesIf}
\dontshow{if (Sys.getenv("R_USER_CACHE_DIR", "") != "") (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
x <- new_min_cohort_deps_installation_proposal(".")
solve_ip(x)
x$get_solution()
\dontshow{\}) # examplesIf}
\dontshow{if (Sys.getenv("R_USER_CACHE_DIR", "") != "") (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
x <- new_min_isolated_deps_installation_proposal(".")
solve_ip(x)
x$get_solution()
\dontshow{\}) # examplesIf}
}
\seealso{
\link[pkgdepends:pkg_installation_proposal]{pkgdepends::pkg_installation_proposal}
}
