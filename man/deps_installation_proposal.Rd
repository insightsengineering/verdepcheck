% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/deps_installation_proposal.R
\name{new_max_deps_installation_proposal}
\alias{new_max_deps_installation_proposal}
\alias{deps_installation_proposal}
\alias{new_release_deps_installation_proposal}
\alias{new_min_deps_installation_proposal}
\title{Create installation proposal using various dependency strategies}
\usage{
new_max_deps_installation_proposal(path, config = list())

new_release_deps_installation_proposal(path, config = list())

new_min_deps_installation_proposal(path, config = list())
}
\arguments{
\item{path}{(\code{string}) path to the package sources}

\item{config}{(\code{list}) configuration options. See \code{\link[pkgdepends:pkg_config]{pkgdepends::pkg_config}} for details.
\code{"dependencies"} and \code{"library"} elements are overwritten by package level defaults.}
}
\value{
\code{pkg_installation_plan} object
}
\description{
These functionalities would read local package \code{DESCRIPTION} file, derive dependencies from
\code{"Config/Needs/verdepcheck"} and create an installation proposal using various strategies for package versions
as described below.
}
\section{strategies}{

Currently implemented strategies:
\itemize{
\item \code{max} - use the greatest version of dependent packages
\item \code{release} - use released version of dependent packages - use CRAN if possible else if GitHub release
is available then use it else fail.
\item \code{min} - use the lowest version of dependent packages incorporating minimal version specification in
\code{"Imports"} and \code{"Suggests"}. If no version is specified then the minimal available
version is assumed. See \link{get_ref_min} for details how the minimal version is determined.
}

Any modification is done for direct (!) dependencies. Indirect ones are installed as usual.
}

\section{configuration}{

\code{verdepcheck} will look into \code{"Config/Needs/verdepcheck"} field of the \code{DESCRIPTION} file for dependent packages
references. See \code{\link[pkgdepends:pkg_refs]{pkgdepends::pkg_refs}} for details and this package \code{DESCRIPTION} file for an example.
Please note that some features are enabled only for package references from GitHub.
If you specify additional details (i.e. tag, commit, PR or \verb{@*release}) in the reference then it wouldn't be changed.
Therefore, in order to make full use of various strategies, it is recommended to specify general reference in form of
\verb{[<package>=][github::]<username>/<repository>[/<subdir>]} - i.e. without \verb{[<detail>]} part.
Please see also \code{\link[pkgdepends:pkg_config]{pkgdepends::pkg_config}} and \code{\link[pak:pak-config]{pak::pak-config}} for other configuration possibilities.
}

\examples{
\dontshow{if (Sys.getenv("R_USER_CACHE_DIR", "") != "") (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
x <- new_max_deps_installation_proposal(".")
x$solve()
x$get_solution()
\dontshow{\}) # examplesIf}
\dontshow{if (Sys.getenv("R_USER_CACHE_DIR", "") != "") (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
x <- new_release_deps_installation_proposal(".")
x$solve()
x$get_solution()
\dontshow{\}) # examplesIf}
\dontshow{if (Sys.getenv("R_USER_CACHE_DIR", "") != "") (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
x <- new_min_deps_installation_proposal(".")
x$solve()
x$get_solution()
\dontshow{\}) # examplesIf}
}
\seealso{
\link[pkgdepends:pkg_installation_proposal]{pkgdepends::pkg_installation_proposal}
}
